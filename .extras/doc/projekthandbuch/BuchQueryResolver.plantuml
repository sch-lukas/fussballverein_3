' Copyright (C) 2019 - present Juergen Zimmermann, Hochschule Karlsruhe
'
' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <https://www.gnu.org/licenses/>.

' Preview durch <Alt>d

@startuml Controller-Klasse

interface Promise<T>
interface Readonly<T>

package @nestjs/graphql {
  annotation Resolver
  annotation UseInterceptors
  annotation Query
  annotation Args

  Resolver .left[hidden].> Promise
}

package generated.prisma {
  class Prisma
  class BuchGetPayload<T>
  Prisma +-- BuchGetPayload
}

package buch {
  package service {
    class BuchService << control >>
  }

  package graphql #DDDDDD {
    class "type BuchDTO = Omit<Buch, 'abbildungen' | 'aktualisiert' | 'erzeugt'" as BuchDTO
    hide BuchDTO circle

    interface IdInput {
        id: number
    }

    class BuchQueryResolver << control >> << @Resolver() >> << @UseInterceptors() >> {
      + @Query() async buch(@Args() id: IdInput): Promise<Readonly<BuchGetPayload>>
      + @Query() async buecher(@Args() titel: string | undefined): Promise<BuchDTO[]>
    }

    BuchQueryResolver o-down-> "1" BuchService : service
    BuchQueryResolver ..> BuchDTO
    BuchQueryResolver ..> IdInput
    BuchQueryResolver .up.> Resolver

    BuchQueryResolver .up.> Promise
    BuchQueryResolver .up.> Readonly

    BuchQueryResolver .up.> BuchGetPayload

    IdInput .down[hidden].> BuchService
    BuchService .down[hidden].> Prisma
    BuchService .down[hidden].> BuchGetPayload
  }
}

hide empty members

footer (c) Juergen Zimmermann

@enduml
